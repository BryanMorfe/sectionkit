{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For this example, we’ll be creating a simple modular app for an upcoming food recommendation"},{"type":"text","text":" "},{"type":"text","text":"network. The app provides users recommendations of different dishes and allows them"},{"type":"text","text":" "},{"type":"text","text":"to place an order of the same."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are two main pages on the app that we’ll focus on; the dish recommendations page"},{"type":"text","text":" "},{"type":"text","text":"and the dish detail page. On the dish recommendation page, there will be various sections,"},{"type":"text","text":" "},{"type":"text","text":"e.g. “Popular Dishes” or “Recommended For You”. In addition, the dish detail page will"},{"type":"text","text":" "},{"type":"text","text":"contain details about a specific dish, and at the end, the same sections as in the dish"},{"type":"text","text":" "},{"type":"text","text":"recommendations page."}]},{"anchor":"Designing-the-App","level":2,"type":"heading","text":"Designing the App"},{"type":"paragraph","inlineContent":[{"type":"text","text":"From the requirements given, there’s opportunity to use SectionKit to modularize the app."},{"type":"text","text":" "},{"type":"text","text":"Since the dish detail page will contain the same content laid out in the same way as"},{"type":"text","text":" "},{"type":"text","text":"dish recommendations page, then it becomes clear that the content in the dish recommendations"},{"type":"text","text":" "},{"type":"text","text":"should be modular and reusable."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"FoodRecNetwork"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The page to the left is the dish detail page. It contains several sections such as a header"},{"type":"text","text":" "},{"type":"text","text":"and additional detail sections about a specific dish. Below, users will be able to explore"},{"type":"text","text":" "},{"type":"text","text":"additional dishes. To the right is the dish recommendations page. It is the same layout and"},{"type":"text","text":" "},{"type":"text","text":"data contained in the sections of the dish recommendations page."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Initially, it may be tempting to think of these two pages as two view controllers containing"},{"type":"text","text":" "},{"type":"text","text":"two collection views that are managed independently. However, there are a few issues that can"},{"type":"text","text":" "},{"type":"text","text":"arise from that."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"First, if the two view controllers are fully indepedent, then that means that to add the"},{"type":"text","text":" "},{"type":"text","text":"recommendations below the details, the same layout has to be built in both places, but perhaps"},{"type":"text","text":" "},{"type":"text","text":"even worse, this results in almost the exact same code being in multiple places. Of course,"},{"type":"text","text":" "},{"type":"text","text":"some aspects of it such as the content provider could be modularized, but that still leaves"},{"type":"text","text":" "},{"type":"text","text":"the responsibility to the view controller to manage the layout."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another option is to add the view of the dish recommendation view controller as a cell in"},{"type":"text","text":" "},{"type":"text","text":"another section, but that too comes with challenges. Even though we’ve overcome the issue"},{"type":"text","text":" "},{"type":"text","text":"of code duplication, we now have a perhaps worse problem; two collection views that scroll"},{"type":"text","text":" "},{"type":"text","text":"along the same main direction with a parent-child relationship. This leads an awkward UX such"},{"type":"text","text":" "},{"type":"text","text":"as interruptions in scrolling when transitioning the scrolling from one collection view to"},{"type":"text","text":" "},{"type":"text","text":"the other."}]},{"anchor":"Designing-With-SectionKit","level":3,"type":"heading","text":"Designing With SectionKit"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To solve the problems highlighted above, it helps to think of each section in the app"},{"type":"text","text":" "},{"type":"text","text":"independently. The dish details header, the additional dish detail sections, and the"},{"type":"text","text":" "},{"type":"text","text":"recommendation sections can be though of as completely independent, and all they need"},{"type":"text","text":" "},{"type":"text","text":"is to be contained within a collection view. Doing so brings the following benefits:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Each section that becomes independent of its container can be reused in other containers;"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The logic to populate and configure a section is completely independent of its container,"},{"type":"text","text":" "},{"type":"text","text":"leading to better modularization and easier to maintain code. In principle that means that:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The section providers don’t need to worry about the details of its container, but still"},{"type":"text","text":" "},{"type":"text","text":"have full control over their content and interactions with it; and,"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The container needn’t worry about the details of the sections, but simply manages"},{"type":"text","text":" "},{"type":"text","text":"the collection view and the order of the sections."}]}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For the reasons stated above, in general, it is expected that each section provider and the"},{"type":"text","text":" "},{"type":"text","text":"section controller be relatively lightweight components."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With that in mind, for the requirements of this app, there will be:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A single Section Controller capable of containing any Section Provider used in the app"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"DishSectionController"},{"type":"text","text":"); and,"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Four Section Providers:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A section provider for the Dish Header section ("},{"type":"codeVoice","code":"DishHeaderDetailSectionProvider"},{"type":"text","text":");"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A section provider for the Additional Details 1 section ("},{"type":"codeVoice","code":"DishDetailOneSectionProvider"},{"type":"text","text":");"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A section provider for the Additional Details 2 section ("},{"type":"codeVoice","code":"DishDetailTwoSectionProvider"},{"type":"text","text":"); and,"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A section provider for the the recommendation sections ("},{"type":"codeVoice","code":"DishRecommendationsSectionProvider"},{"type":"text","text":")."}]}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The reason to keep all recommendation sections in a single section provider is that the"},{"type":"text","text":" "},{"type":"text","text":"content is expected to always be intertwined and its layout is always coming from a service"},{"type":"text","text":" "},{"type":"text","text":"that will ultimately determine which sections show up, so it makes sense that they are"},{"type":"text","text":" "},{"type":"text","text":"coupled together."}]},{"anchor":"Implementation","level":3,"type":"heading","text":"Implementation"},{"type":"codeListing","syntax":"swift","code":["import UIKit","import SectionKit","","class DishSectionController : CollectionSectionController<String, DishItemIdentifier> {}","","struct DishItemIdentifier : Identifiable {","    let id = UUID()","    let dishID: Dish.ID","","    static func identifier(with dishID: Dish.ID) -> DishItemIdentifier {","        DishItemIdentifier(dishID: dishID)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"DishSectionController"},{"type":"text","text":" does not need any special implementation for now, so we’ll leave"},{"type":"text","text":" "},{"type":"text","text":"it as-is. However, notice that the "},{"type":"codeVoice","code":"ItemIdentifierType"},{"type":"text","text":" is an identifiable struct called"},{"type":"text","text":" "},{"type":"codeVoice","code":"DishItemIdentifier"},{"type":"text","text":". This is a very important practice that should be used to avoid collision"},{"type":"text","text":" "},{"type":"text","text":"within the data source’s snapshot in the collection view. Every time a new "},{"type":"codeVoice","code":"DishItemIdentifier"},{"type":"text","text":" "},{"type":"text","text":"is created, it also creates a unique "},{"type":"codeVoice","code":"id"},{"type":"text","text":" which is then added to the snapshot. Wrapping up"},{"type":"text","text":" "},{"type":"text","text":"the ID makes it easy to avoid collisions regardless of the sections’ independence."}]},{"type":"codeListing","syntax":"swift","code":["import UIKit","import SectionKit","","class DishHeaderDetailSectionProvider : CollectionSectionProvider<String, DishItemIdentifier> {","    ","    let id = UUID()","    ","    var cellProvider: CollectionSectionController<String, String>.CellProvider {{","        sectionController, indexPath, item in","        return sectionController.dequeueConfiguredReusableCell(using: self.cellRegistration, for: indexPath, item: item, sectionProvider: self)","    }}","","    var sectionProvider: CollectionSectionController<String, String>.SectionProvider {{","        sectionIndex, layoutEnvironment in","        let item = NSCollectionLayoutItem(","            layoutSize: NSCollectionLayoutSize(","                widthDimension: .fractionalWidth(1),","                heightDimension: .estimated(180)","            )","        )","        ","        let group = NSCollectionLayoutGroup.horizontal(","            layoutSize: NSCollectionLayoutSize(","                widthDimension: .fractionalWidth(1),","                heightDimension: .estimated(180)","            ),","            repeatingSubitem: item,","            count: 1","        )","        group.contentInsets = .init(top: 0, leading: 10, bottom: 0, trailing: 10)","        ","        let section = NSCollectionLayoutSection(group: group)","        ","        return section","    }}","        ","    let cellRegistration = UICollectionView.CellRegistration<DishHeaderCollectionViewCell, String> {","        cell, indexPath, dishItemIdentifier in","        let identifier = self.identifiers[dishItemIdentifier]","        if let dish = DishStore.shared.dish(for: identifier.dishID) {","            cell.configure(with: dish)","        } else {","            Task {","                do {","                    try await DishStore.shared.downloadDish(with: identifier.dishID)","                    setItemNeedsUpdate(dishItemIdentifier)","                } catch {","                    \/\/\/ Handler error","                }","            }","        }","    }","","    var dishID: Dish.ID","    var identifiers: [UUID : DishItemIdentifier] = [:]","","    init(dishID: Dish.ID) {","        self.dishID = dishID","    }","","    func willMove(toSectionController sectionController: CollectionSectionController<String, String>) {","        \/\/\/ Begin prefetching data","        Task {","            try? await DishStore.shared.downloadDish(with: self.dishID)","        }","    }","    ","    func didMove(toSectionController sectionController: CollectionSectionController<String, String>) {","        \/\/\/ Add this provider as a delegate","        sectionController.addDelegate(self, sectionProvider: self)","","        \/\/\/ Add data for section to be populated.","        let identifier: DishItemIdentifier = .identifier(with: dishID)","        identifiers[identifier.id] = identifier","        ","        var snapshot = CollectionSectionController<String, String>.DiffableDataSourceSnapshot()","        snapshot.appendSections([\"header.sectionID\"])","        snapshot.appendItems([identifier], toSection: \"header.sectionID\")","        sectionController.apply(snapshot, sectionProvider: self)","    }","}","","extension DishHeaderDetailSectionProvider : CollectionSectionControllerDelegate {","    func collectionSectionController(","        _ sectionController: CollectionSectionController<String, DishItemIdentifier>,","        didSelectItemAt indexPath: IndexPath","    ) {","        \/\/\/ Handle selections ","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This very simple Section Provider does a few things:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It configures and provides a cell to be used for the items in the section;"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It defines the layout of the section;"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It downloads the data needed for the section’s content; and,"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It handles user interaction with the section’s content."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To present this (and other) sections in a section controller, is as simple as"},{"type":"text","text":" "},{"type":"text","text":"creating the section controller with the desired sections."}]},{"type":"codeListing","syntax":"swift","code":["class HomeViewController : UIViewController {","    ","    override func viewDidLoad() {","        super.viewDidLoad()","","        \/\/\/ ... \/\/\/","    }","","    func presentDishDetails(for dishID: Dish.ID) {","        let sectionController = DishSectionController(","            sectionProviders: [","                DishHeaderDetailSectionProvider(dishID: dishID),","                DishDetailOneSectionProvider(dishID: dishID),","                DishDetailTwoSectionProvider(dishID: dishID),","                DishRecommendationsSectionProvider(dishID: dishID)","            ]","        )","        present(sectionController, animated: true, completion: nil)","    }","","    func presentRecommendations(for dishID: Dish.ID?) {","        let sectionController = DishSectionController(","            sectionProviders: [","                DishRecommendationsSectionProvider(dishID: dishID)","            ]","        )","        present(sectionController, animated: true, completion: nil)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With that, we have a fully modular app with reusable sections that can live"},{"type":"text","text":" "},{"type":"text","text":"in multiple different pages of it."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/sectionkit\/modularappwithsectionkit"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SectionKit\/documentation\/SectionKit\/ModularAppWithSectionKit","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn how to use SectionKit to modularize your apps."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Create a Modular App With SectionKit","role":"article","modules":[{"name":"SectionKit"}]},"hierarchy":{"paths":[["doc:\/\/SectionKit\/documentation\/SectionKit"]]},"seeAlsoSections":[{"title":"Getting Started","identifiers":["doc:\/\/SectionKit\/documentation\/SectionKit\/CollectionSectionController","doc:\/\/SectionKit\/documentation\/SectionKit\/CollectionSectionProvider"],"generated":true}],"references":{"doc://SectionKit/documentation/SectionKit":{"role":"collection","title":"SectionKit","abstract":[{"type":"text","text":"UIKit extension to modularize app with single-responsibility reusable collection view sections."}],"identifier":"doc:\/\/SectionKit\/documentation\/SectionKit","kind":"symbol","type":"topic","url":"\/documentation\/sectionkit"},"doc://SectionKit/documentation/SectionKit/CollectionSectionController":{"role":"symbol","title":"CollectionSectionController","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"CollectionSectionController"}],"abstract":[{"type":"text","text":"A container controller for section providers. This object wraps a collection view using a compositional layout and"},{"type":"text","text":" "},{"type":"text","text":"a diffable data source and receives section providers to layout views in a collection."}],"identifier":"doc:\/\/SectionKit\/documentation\/SectionKit\/CollectionSectionController","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CollectionSectionController"}],"url":"\/documentation\/sectionkit\/collectionsectioncontroller"},"doc://SectionKit/documentation/SectionKit/CollectionSectionProvider":{"role":"symbol","title":"CollectionSectionProvider","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"CollectionSectionProvider"}],"abstract":[{"type":"text","text":"Declares a type that can provide section layout and content for a section controller."}],"identifier":"doc:\/\/SectionKit\/documentation\/SectionKit\/CollectionSectionProvider","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CollectionSectionProvider"}],"url":"\/documentation\/sectionkit\/collectionsectionprovider"},"FoodRecNetwork":{"alt":"UI mock of sample app","type":"image","identifier":"FoodRecNetwork","variants":[{"url":"\/images\/FoodRecNetwork.png","traits":["1x","light"]}]}}}